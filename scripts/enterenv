#!/bin/bash

# A temporary varible to help checkin whether the environment has been explicitly
# set to blank
ENVIRONMENT_SET='0'
if [[ "${USER:?}" =~ '+' ]]; then
  ENVIRONMENT_SET='1'
fi

IFS="+" read USER ENV <<< "${USER}"

THROWAWAY='0'
if [ "$ENVIRONMENT_SET" = '1' ] && [ -z "$ENV" ]; then
  THROWAWAY='1'
else
  ENV=$USER
fi

# There's no need for this to be around anymore from this point on
unset ENVIRONMENT_SET

# The path relative to the host Docker machine where data will be persisted, used
# for adjusting paths when nesting containers
HOST_DATA="${HOST_DATA:?}"

# This is where users environments will be stored
USER_ROOT="${USER_ROOT:-"/data/users/$USER"}"

# Not really needed to be defined as a variable but allows for injecting its value
# from outside (might be useful for testing purposes)
GH_ENVY_HOME=${GH_ENVY_HOME:-"https://github.com/$USER/envy.home.git"}

# The obvious ones
ENV_IMAGE="$USER/$ENV"
ENV_ROOT="$USER_ROOT/envs/$ENV"
DIND_CONTAINER_NAME="$USER.$ENV"

data-init() {
  mkdir -p $(readlink -f "${USER_ROOT}/..")
  cp /bin/envcmd /data/.envcmd
}

user-init() {
  if [[ ! -d "$USER_ROOT" ]]; then
    mkdir -p "$USER_ROOT"
    mkdir -p "$USER_ROOT/envs"
    if $(wget --spider $GH_ENVY_HOME &>/dev/null); then
      git clone $GH_ENVY_HOME "$USER_ROOT/home"
    else
      mkdir -p "$USER_ROOT/home"
    fi
    cp -R /tmp/data/root "$USER_ROOT/root"
  fi
}

env-init() {
  if [[ ! -d "$ENV_ROOT" ]]; then
    cp -R /tmp/data/env "$ENV_ROOT"
  fi
  env-docker
  cd "$ENV_ROOT"
  if ! docker history $ENV_IMAGE &> /dev/null; then
    echo "Building environment ... "
    docker build -t $ENV_IMAGE . &> /dev/null
  fi
}

env-docker() {
  mkdir -p "$ENV_ROOT/run"
  if ! docker diff $DIND_CONTAINER_NAME &> /dev/null; then
    docker run -d --privileged \
      --name $DIND_CONTAINER_NAME \
      --hostname "$ENV" \
      --env PORT=2375 \
      --restart always \
      --volume "$HOST_DATA/users/$USER/envs/$ENV/run:/var/run" \
      jpetazzo/dind > /dev/null
  fi
}

env-session() {
  local session="$USER.$(date +%s)"
  local status="128"
  set +e
  while [[ "$status" == "128" ]]; do
    if [[ -f "$USER_ROOT/root/$session" ]]; then
      read cmd args <<< "$(cat $USER_ROOT/root/$session)"
      case "$cmd" in
      *rebuild)
        docker build -t "$ENV_IMAGE" .
        ;;
      *switch)
        echo "Switching to $args ... "
        ENV="$args"
        env-init
        ;;
      *commit)
        echo "Committing to $args ... "
        docker commit "$session" "$ENV_IMAGE" > /dev/null
        ;;
      esac
      rm -f "$USER_ROOT/root/$session"
    fi
    docker rm -f "$session" &> /dev/null
    docker run -it \
      --name "$session" \
      --net "container:$DIND_CONTAINER_NAME" \
      --env "HOSTNAME=$ENV" \
      --env "ENVY_SESSION=$session" \
      --env "ENVY_RANDOM=$RANDOM" \
      --env "DOCKER_HOST=unix:///env/run/docker.sock" \
      --volume "$HOST_DATA/.envcmd:/sbin/reload:ro" \
      --volume "$HOST_DATA/.envcmd:/sbin/rebuild:ro" \
      --volume "$HOST_DATA/.envcmd:/sbin/switch:ro" \
      --volume "$HOST_DATA/.envcmd:/sbin/commit:ro" \
      --volume "$HOST_DATA/users/$USER/envs/$ENV:/env" \
      --volume "$HOST_DATA/users/$USER/root:/root" \
      --volume "$HOST_DATA/users/$USER/home:/home/$USER" \
      --volume "$HOST_DATA:/admin" \
      "$ENV_IMAGE" $(docker-cmd)
    status=$?
  done
  docker rm -f "$session" > /dev/null
  if [ "$THROWAWAY" = '1' ]; then
    docker rmi "$ENV_IMAGE" > /dev/null
  fi
  [[ "$status" == "128" ]] || exit "$status"
}

docker-cmd() {
  if [[ "$(docker inspect -f {{.Config.Cmd}} $ENV_IMAGE)" != "<no value>" ]]; then
    return
  fi
  if [[ "$(docker inspect -f {{.Config.Entrypoint}} $ENV_IMAGE)" != "<no value>" ]]; then
    return
  fi
  echo "/bin/sh"
}

main() {
  set -e
  data-init
  user-init
  env-init
  env-session
}

main "$@"
